# Finding Averages (Reddit Beginner Projects)

# Created June 12, 2015

version = 1.3 

import time

print("Gamble's Statistical Software --- Version %r" % version)


def start_run() :
	"""Function for obtaining the amount of numbers to be input
	"""
	
	#Set flag for while loop
	val = False
	
	#While loop to determine if input numerical
	while not val:
	
		#Start by asking how long the set of numbers will be
		numbers = input("How many numbers would you like to input? ")
	
		try:
			val = int(numbers)
			
		except ValueError:
			print("Thats not an int!")
			
	numbers = int(numbers)
	
	#Print confirmation of the input length, stall one second, and conclude
	print("You've selected an input length of %d." % numbers)
	
	return numbers
	
	
def user_entry(x):
	"""Function to accept user input values and combine into a vector
	"""
	
	#Create empty vector and prompt user to fill in
	print("Please enter the numbers below, one at a time:")
	
	entries = range(x)
	values = []
	
	#For loop that accepts the number of entries specified, and appends to values 
	for i in entries:
		
		val = False		
	
		#While loop to determine if input numerical
		while not val:
			data = input("> ")
			
			try:
				val = int(data)
			
			except ValueError:
				print("Thats not an int!")
			
		data = int(data)
	
		#Append data to values vector
		values.append(data)
				
				
	#Display the data
	values.sort()
	print("Your inputs look a little something like this \n", values)
	
	#Save the input numbers as values, and the number of entries as len(entries)
	return values
		

def stat_pack(data):
	"""Function to take the user input values and calculate mean, median and modes.
	Simply outputs the values.
	"""
	
	#Calculate the mean
	
	#Sort data
	data.sort()
	
	#Calculate the sum and number of entries
	s = sum(data)
	n = len(data)
	mean = s / n + 0.0
	
	#Print result immediately
	print("Mean: %r" % mean)
	
	
	#Calculate the median
	
	#Check if n is odd or even
	if n % 2 == 1:
		mid = (n - 1) / 2
		mid = int(mid)
		median = data[mid]
		
	#Average of two middle values if even number of entries
	else:
		
		mid_low =  n / 2 
		mid_low = int(mid_low)
		mid_high = n / 2 - 1 
		mid_high = int(mid_high)
		
		median = (data[mid_low] + data[mid_high] + 0.0 ) / 2.0
		
	print("Median: %r" % median)
	
	#Calculate the mode
	
	#Sort and place identify most common entry
	data.sort()
	d = max(set(data), key = data.count)
	
	#Print mode immediately
	print("Mode: ", d)
	

def play_again():
	"""Asks user if they would like to do another calculation
	after the program displays the results.
	"""
	
	#Prompt user for a yes or no response
	play = input("Calculate again? (Y/N)" )
	
	#Keep track of positive responses
	if play in ["Yes", "yes", "y","Y"]:
		data = user_entry(start_run())
		stat_pack(data)
		play_again()
	
	#Anything else will end the program
	else:
		print("Whatever you say!")
		

data = user_entry(start_run())
stat_pack(data)
play_again()
